<!-- Return all countries with population between 9 and 10 million. Retain the structure of country elements from the original data.  -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
<xsl:template match = "//country[@population &gt;= 9000000 and @population &lt;= 10000000]">
    <xsl:copy-of select = "." />
</xsl:template>

<!-- ignore text elements -->
<xsl:template match = "text()"/>
</xsl:stylesheet>

<!-- Create a table using HTML constructs that lists all countries that have more than 3 languages. Each row should contain the country name in bold, population, area, and number of languages. Sort the rows in descending order of number of languages. No header is needed for the table, but use <table border="1"> to make it format nicely, should you choose to check your result in a browser. -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
<xsl:template match = "/">
  <html>
    <table border="1">
      <xsl:for-each select = ".//country">
      <xsl:sort select="count(language)" order = "descending" />
        <xsl:if test="count(language) &gt; 3">
          <tr>
          <td><b><xsl:value-of select="@name" /></b></td>
          <td><xsl:value-of select="@population" /></td>
          <td><xsl:value-of select="@area" /></td>
          <td> <xsl:value-of select="./count(language)" /> </td>
          </tr>
        </xsl:if>
      </xsl:for-each>
    </table>
 </html>
</xsl:template>

<!-- ignore text elements -->
<xsl:template match = "text()"/>
</xsl:stylesheet>


<!-- Create an alternate version of the countries database: for each country, include its name and population as sublements, and the number of languages and number of cities as attributes (called "languages" and "cities" respectively). -->

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
<xsl:template match = "*|@*|text()">
  <xsl:copy>
      <xsl:apply-templates select="*|@*|text()" />
   </xsl:copy>
</xsl:template>

<!-- change country elements -->
<xsl:template match = "country">
  <country>
    <xsl:attribute name="languages">
    <xsl:value-of select="./count(language)" />
  </xsl:attribute>
  <xsl:attribute name="cities">
    <xsl:value-of select="./count(city)" />
  </xsl:attribute>
    <name> <xsl:value-of select = "@name" /></name>
    <population><xsl:value-of select = "@population" /></population>
  </country>
</xsl:template>
</xsl:stylesheet>

<!-- Find all country names containing the string "stan"; return each one within a "Stan" element.  -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
<xsl:template match = "//country[contains(@name, 'stan')]">
    <Stan><xsl:value-of select = "@name" /></Stan>
</xsl:template>

<!-- ignore text elements -->
<xsl:template match = "text()"/>
</xsl:stylesheet>

<!-- Remove from the data all countries with area greater than 40,000 and all countries with no cities listed. Otherwise the structure of the data should be the same.  -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
<xsl:template match = "*|@*|text()">
  <xsl:copy>
      <xsl:apply-templates select="*|@*|text()" />
   </xsl:copy>
</xsl:template>

<!-- ignore countries satisfies these conditions-->
<xsl:template match = "country[@area &gt; 40000 or count(city) = 0]" />
</xsl:stylesheet>